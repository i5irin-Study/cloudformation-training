AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AnsibleBucketName:
    Type: String
Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !ImportValue EC2SSMRoleID
  WebInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !ImportValue KeyPairName
      DisableApiTermination: false
      ImageId: ami-0bba69335379e17f8
      InstanceType: t2.micro
      IamInstanceProfile: !Ref InstanceProfile
      # Basic monitoring only
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !ImportValue WebSubnetID
          GroupSet:
          - !ImportValue SecurityGroupID
  ApplyAnsiblePlaybooks:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-ApplyAnsiblePlaybooks
      WaitForSuccessTimeoutSeconds: 300
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref WebInstance
      Parameters:
        SourceType:
          - "S3"
        SourceInfo:
          - !Sub |
            {"path": "https://${AnsibleBucketName}.s3.ap-northeast-1.amazonaws.com/ansible.zip"}
        InstallDependencies:
          - "True"
        PlaybookFile:
          - "ansible/setup.yml"
        ExtraVariables:
          - "SSM=True"
        Check:
          - "False"
        Verbose:
          - "-v"
  DBPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
  DB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: Web-DB
      Engine: mysql
      EngineVersion: 8.0
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      AllocatedStorage: 10
      MasterUsername: !Sub "{{resolve:secretsmanager:${DBPassword}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DBPassword}:SecretString:password}}"
      DBName: web
      VPCSecurityGroups:
        - !ImportValue DBSecurityGroupID
      DBSubnetGroupName: !ImportValue DBSubnetGroupID
      MultiAZ: false
      AvailabilityZone: ap-northeast-1a
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: 
        - !ImportValue WebSubnetID
        - !ImportValue WebBackupSubnetID
      SecurityGroups: 
        - !ImportValue ALBSecurityGroupID
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue VPCID
      TargetType: instance
      Targets:
        - Id: !Ref WebInstance
